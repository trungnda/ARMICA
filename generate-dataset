import os, cv2, numpy as np
import matplotlib

matplotlib.use('TkAgg')
import matplotlib.pyplot as plt
import struct
from shutil import copyfile

# video_path = '/media/data/datasets/Kinect2017-10/Datasets/'
video_path = '/Users/trungnd/pfiev/yolo-trainer/video/'
out_path = '/Users/trungnd/pfiev/yolo-trainer/output/'
gt_root = '/Users/trungnd/pfiev/yolo-trainer/input/'

color_dir = '/Users/trungnd/pfiev/yolo-trainer/input/color.avi'
depth_dir = '/Users/trungnd/pfiev/yolo-trainer/input/'
output_training_data = '/Users/trungnd/pfiev/yolo-trainer/training/'
prefix_data = 'data_1_1'
cluster_img = 30


def read_depth(file_reader):
    try:
        byte = file_reader.read(4)
        val = struct.unpack('=L', byte)
        # print 'img size: '+str(val[0])
        img_data = np.fromstring(file_reader.read(val[0]), dtype=np.uint8)
        depth = cv2.imdecode(img_data, cv2.IMREAD_ANYDEPTH)
        # depth = cv2.resize(depth, (640 / 3, 480 / 3))

        # depth = np.right_shift(depth, 7)
        # depth = np.asarray(depth, np.uint8)

        depth = np.left_shift(depth, 5)

        depth = np.asarray(depth, np.uint8)
        ret, mask = cv2.threshold(depth, 1, 255, cv2.THRESH_BINARY)

        # depth
        # return depth_vis
        return depth
    except Exception as e:
        print 'Error: ' + str(e)
        return None


gt_files = []
for _, _, files in os.walk(gt_root):
    gt_files = files
    break

for path in gt_files:
    print path
    print(gt_root + path)
    f = open(gt_root + path, 'rt')
    lines = f.read().strip().split('\n')
    file_name = path.split('.')[0]
    print file_name

    video_dir = out_path + file_name
    print video_dir

    # fourcc = cv2.VideoWriter_fourcc(*'H264')
    # out = cv2.VideoWriter(out_path + file_name + '_mask.avi', fourcc, 20.0, (640, 480))

    f_d = open(gt_root + path, 'rb')

    frame_num = 0
    data_num = 0
    # copyfile(video_path+file_name+'/Kinect_3/color.avi', './data/'+file_name+'.avi')
    color_vid = cv2.VideoCapture(color_dir)

    while True:

        depth = read_depth(f_d)
        ret, color = color_vid.read()
        if frame_num % cluster_img == 0:
            img_w, img_h, img_chanels = color.shape
            img_w = float(img_w)
            img_h = float(img_h)
            # print img.shape
            # out.write(img)
            # cv2.imwrite(video_path+'/frame_'+str(frame_num)+'.png',img)

            im2, contours, hierarchy = cv2.findContours(depth, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
            depth = cv2.cvtColor(depth, cv2.COLOR_GRAY2BGR)
            # cv2.drawContours(img, contours, -1, (0, 255, 0), 1)
            #
            #
            maxContourIndex = 0
            if (len(contours) > 0):
                for index, contour in enumerate(contours):
                    # print ("Area: ", cv2.contourArea(contour))
                    # print ("Max area: ", cv2.contourArea(contours[maxContourIndex]))
                    # print ("Index ", index)
                    if (cv2.contourArea(contour) >= cv2.contourArea(contours[maxContourIndex])):
                        maxContourIndex = index
                        # print('Max index: ', index)
                # print('Max index: ', maxContourIndex)
                x, y, w, h = cv2.boundingRect(contours[maxContourIndex])
                cv2.rectangle(color, (x, y), (x + w, y + h), (255, 0, 0), 3)

                cv2.imwrite(output_training_data + prefix_data + str(data_num) + '.jpg', color)

                w = float(w)
                h = float(h)

                with open(output_training_data + prefix_data + str(data_num) + '.txt', 'w') as f:
                    f.write(
                        str(0) + ' ' + str((x + w / 2)/img_w) + ' ' + str((y + h / 2)/img_h) + ' ' + str(w / img_w) + ' ' + str(
                            h / img_h))
                f.closed
                data_num += 1

        # plt.imshow(img)
        # plt.show()

        frame_num += 1
        # out.write(color)
        # print("Frame: ", frame_num)
        # if frame_num % 10 == 0:
        #     out.write(img)
        # if frame_num > 4:
        #     break
        if color is None:
            break

    # break
    # pass

    break

# print lines
# break
